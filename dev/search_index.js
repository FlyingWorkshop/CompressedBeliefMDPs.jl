var documenterSearchIndex = {"docs":
[{"location":"#CompressedBeliefMDPs.jl","page":"CompressedBeliefMDPs.jl","title":"CompressedBeliefMDPs.jl","text":"","category":"section"},{"location":"","page":"CompressedBeliefMDPs.jl","title":"CompressedBeliefMDPs.jl","text":"Documentation for CompressedBeliefMDPs.jl","category":"page"},{"location":"","page":"CompressedBeliefMDPs.jl","title":"CompressedBeliefMDPs.jl","text":"Modules = [CompressedBeliefMDPs]","category":"page"},{"location":"#CompressedBeliefMDPs.CompressedBeliefMDP","page":"CompressedBeliefMDPs.jl","title":"CompressedBeliefMDPs.CompressedBeliefMDP","text":"struct CompressedBeliefMDP{B, A} <: MDP{B, A}\n\nA struct representing a Markov Decision Process (MDP) with compressed beliefs.\n\nFields\n\nbmdp::GenerativeBeliefMDP: The underlying GenerativeBeliefMDP that defines the original MDP.\ncompressor::Compressor: The compressor used to compress beliefs in the MDP.\n\nType Parameters\n\nB: Type of the belief space.\nA: Type of the action space.\n\nExample\n\npomdp = TigerPOMDP()\nupdater = DiscreteUpdater(pomdp)\ncompressor = PCACompressor(1)\ngenerative_mdp = GenerativeBeliefMDP(pomdp, updater)\nmdp = CompressedBeliefMDP(generative_mdp, compressor)\n\n\n\n\n\n","category":"type"},{"location":"#CompressedBeliefMDPs.CompressedBeliefMDP-Tuple{POMDPs.POMDP, POMDPs.Updater, Compressor}","page":"CompressedBeliefMDPs.jl","title":"CompressedBeliefMDPs.CompressedBeliefMDP","text":"CompressedBeliefMDP(pomdp::POMDP, updater::Updater, compressor::Compressor)\n\nCreate a CompressedBeliefMDP based on a given POMDP, updater, and compressor.\n\nThis function initializes a GenerativeBeliefMDP using the provided pomdp and updater. It then constructs a CompressedBeliefMDP with the specified compressor.\n\nArguments\n\npomdp::POMDP: The original partially observable Markov decision process (POMDP).\nupdater::Updater: The belief updater used in the GenerativeBeliefMDP.\ncompressor::Compressor: The compressor used to compress beliefs in the MDP.\n\nReturns\n\nCompressedBeliefMDP{CompressedBeliefMDPState, actiontype(bmdp)}: The compressed belief MDP.\n\nExample\n\npomdp = MyPOMDP()  # replace with your specific POMDP type\nupdater = MyUpdater()  # replace with your specific updater type\ncompressor = MyCompressor()  # replace with your specific compressor type\n\nmdp = CompressedBeliefMDP(pomdp, updater, compressor)\n\n\n\n\n\n","category":"method"},{"location":"#CompressedBeliefMDPs.CompressedBeliefMDPState","page":"CompressedBeliefMDPs.jl","title":"CompressedBeliefMDPs.CompressedBeliefMDPState","text":"struct CompressedBeliefMDPState\n\nA struct representing the state of a CompressedBeliefMDP.\n\nFields\n\nbÌƒ::AbstractArray{<:Real}: Compressed belief vector.\n\n\n\n\n\n","category":"type"},{"location":"#CompressedBeliefMDPs.Compressor","page":"CompressedBeliefMDPs.jl","title":"CompressedBeliefMDPs.Compressor","text":"Base type for an MDP/POMDP belief compression.\n\n\n\n\n\n","category":"type"},{"location":"#CompressedBeliefMDPs.compress","page":"CompressedBeliefMDPs.jl","title":"CompressedBeliefMDPs.compress","text":"compress(compressor::Compressor, beliefs)\n\nCompress the sampled beliefs using method associated with compressor, and returns a compressed representation.\n\n\n\n\n\n","category":"function"},{"location":"#CompressedBeliefMDPs.decompress","page":"CompressedBeliefMDPs.jl","title":"CompressedBeliefMDPs.decompress","text":"decompress(compressor::Compressor, compressed)\n\nDecompress the compressed beliefs using method associated with compressor, and returns the reconstructed beliefs.\n\n\n\n\n\n","category":"function"},{"location":"#CompressedBeliefMDPs.fit!","page":"CompressedBeliefMDPs.jl","title":"CompressedBeliefMDPs.fit!","text":"fit!(compressor::Compressor, beliefs)\n\nFit the compressor to beliefs.\n\n\n\n\n\n","category":"function"},{"location":"#CompressedBeliefMDPs.sample","page":"CompressedBeliefMDPs.jl","title":"CompressedBeliefMDPs.sample","text":"sample(sampler::Sampler, pomdp::POMDP; n_samples::Integer=100)\n\nReturn a matrix of beliefs sampled from pomdp.\n\n\n\n\n\n","category":"function"}]
}
